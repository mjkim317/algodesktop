{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/algo_term_project/src/components/BarCanvas.js\";\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass BarCanvas extends Component {\n  constructor(...args) {\n    super(...args);\n    this.Canvas = document.createElement('canvas');\n    this.ctx = null;\n    this.backCtx = null;\n  }\n\n  componentDidMount() {\n    if (this.ctx === null) {\n      this.ctx = this.refs.canvas.getContext(\"2d\", {\n        alpha: false\n      });\n    }\n\n    const Draw = () => {\n      this.ctx.drawImage(this.Canvas, 0, 0);\n      requestAnimationFrame(Draw);\n    };\n\n    Draw();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      width,\n      height\n    } = this.props;\n    this.Canvas.width = width;\n    this.Canvas.height = height;\n\n    if (this.backCtx === null) {\n      this.backCtx = this.Canvas.getContext(\"2d\", {\n        alpha: false\n      });\n    }\n\n    this.backCtx.fillStyle = \"green\";\n    this.backCtx.fillRect(0, 0, width, height);\n    const element = this.props.element.arr;\n    const w = width / (element.length + 2);\n    this.backCtx.beginPath();\n    let x = w;\n\n    for (const state of element) {\n      this.backCtx.fillStyle = state.color;\n      const h = height * state.height / 100;\n      let y = height - h;\n      this.backCtx.fillRect(x, y, w, h);\n      this.backCtx.rect(x, y, w, h);\n      x += w;\n    }\n\n    this.backCtx.strokeStyle = \"black\";\n    this.backCtx.stroke();\n  }\n\n  render() {\n    const {\n      width,\n      height\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: \"canvas\",\n      width: width,\n      height: height\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default BarCanvas;","map":{"version":3,"sources":["/Users/admin/Desktop/algo_term_project/src/components/BarCanvas.js"],"names":["React","Component","BarCanvas","Canvas","document","createElement","ctx","backCtx","componentDidMount","refs","canvas","getContext","alpha","Draw","drawImage","requestAnimationFrame","componentDidUpdate","prevProps","prevState","width","height","props","fillStyle","fillRect","element","arr","w","length","beginPath","x","state","color","h","y","rect","strokeStyle","stroke","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;;AAEA,MAAMC,SAAN,SAAwBD,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAC9BE,MAD8B,GACrBC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CADqB;AAAA,SAE9BC,GAF8B,GAExB,IAFwB;AAAA,SAG9BC,OAH8B,GAGpB,IAHoB;AAAA;;AAK9BC,EAAAA,iBAAiB,GAAG;AAChB,QAAI,KAAKF,GAAL,KAAa,IAAjB,EAAuB;AACnB,WAAKA,GAAL,GAAW,KAAKG,IAAL,CAAUC,MAAV,CAAiBC,UAAjB,CAA4B,IAA5B,EAAkC;AACzCC,QAAAA,KAAK,EAAE;AADkC,OAAlC,CAAX;AAGH;;AACD,UAAMC,IAAI,GAAG,MAAM;AACf,WAAKP,GAAL,CAASQ,SAAT,CAAmB,KAAKX,MAAxB,EAAgC,CAAhC,EAAmC,CAAnC;AACAY,MAAAA,qBAAqB,CAACF,IAAD,CAArB;AACH,KAHD;;AAIAA,IAAAA,IAAI;AACP;;AAEDG,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACrC,UAAM;AACFC,MAAAA,KADE;AAEFC,MAAAA;AAFE,QAGF,KAAKC,KAHT;AAIA,SAAKlB,MAAL,CAAYgB,KAAZ,GAAoBA,KAApB;AACA,SAAKhB,MAAL,CAAYiB,MAAZ,GAAqBA,MAArB;;AACA,QAAI,KAAKb,OAAL,KAAiB,IAArB,EAA2B;AACvB,WAAKA,OAAL,GAAe,KAAKJ,MAAL,CAAYQ,UAAZ,CAAuB,IAAvB,EAA6B;AACxCC,QAAAA,KAAK,EAAE;AADiC,OAA7B,CAAf;AAGH;;AACD,SAAKL,OAAL,CAAae,SAAb,GAAyB,OAAzB;AACA,SAAKf,OAAL,CAAagB,QAAb,CAAsB,CAAtB,EAAyB,CAAzB,EAA4BJ,KAA5B,EAAmCC,MAAnC;AACA,UAAMI,OAAO,GAAG,KAAKH,KAAL,CAAWG,OAAX,CAAmBC,GAAnC;AACA,UAAMC,CAAC,GAAGP,KAAK,IAAIK,OAAO,CAACG,MAAR,GAAiB,CAArB,CAAf;AACA,SAAKpB,OAAL,CAAaqB,SAAb;AACA,QAAIC,CAAC,GAAGH,CAAR;;AACA,SAAK,MAAMI,KAAX,IAAoBN,OAApB,EAA6B;AACzB,WAAKjB,OAAL,CAAae,SAAb,GAAyBQ,KAAK,CAACC,KAA/B;AACA,YAAMC,CAAC,GAAIZ,MAAM,GAAGU,KAAK,CAACV,MAAhB,GAA0B,GAApC;AACA,UAAIa,CAAC,GAAGb,MAAM,GAAGY,CAAjB;AACA,WAAKzB,OAAL,CAAagB,QAAb,CAAsBM,CAAtB,EAAyBI,CAAzB,EAA4BP,CAA5B,EAA+BM,CAA/B;AACA,WAAKzB,OAAL,CAAa2B,IAAb,CAAkBL,CAAlB,EAAqBI,CAArB,EAAwBP,CAAxB,EAA2BM,CAA3B;AACAH,MAAAA,CAAC,IAAIH,CAAL;AACH;;AACD,SAAKnB,OAAL,CAAa4B,WAAb,GAA2B,OAA3B;AACA,SAAK5B,OAAL,CAAa6B,MAAb;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,UAAM;AAAClB,MAAAA,KAAD;AAAQC,MAAAA;AAAR,QAAkB,KAAKC,KAA7B;AACA,wBACI;AAAQ,MAAA,GAAG,EAAC,QAAZ;AAAqB,MAAA,KAAK,EAAEF,KAA5B;AAAmC,MAAA,MAAM,EAAEC;AAA3C;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH;;AArD6B;;AAwDlC,eAAelB,SAAf","sourcesContent":["import React, {Component} from 'react';\n\nclass BarCanvas extends Component {\n    Canvas = document.createElement('canvas');\n    ctx = null;\n    backCtx = null;\n\n    componentDidMount() {\n        if (this.ctx === null) {\n            this.ctx = this.refs.canvas.getContext(\"2d\", {\n                alpha: false\n            });\n        }\n        const Draw = () => {\n            this.ctx.drawImage(this.Canvas, 0, 0);\n            requestAnimationFrame(Draw);\n        };\n        Draw();\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        const {\n            width,\n            height\n        } = this.props;\n        this.Canvas.width = width;\n        this.Canvas.height = height;\n        if (this.backCtx === null) {\n            this.backCtx = this.Canvas.getContext(\"2d\", {\n                alpha: false\n            });\n        }\n        this.backCtx.fillStyle = \"green\";\n        this.backCtx.fillRect(0, 0, width, height);\n        const element = this.props.element.arr;\n        const w = width / (element.length + 2);\n        this.backCtx.beginPath();\n        let x = w;\n        for (const state of element) {\n            this.backCtx.fillStyle = state.color;\n            const h = (height * state.height) / 100;\n            let y = height - h;\n            this.backCtx.fillRect(x, y, w, h);\n            this.backCtx.rect(x, y, w, h);\n            x += w;\n        }\n        this.backCtx.strokeStyle = \"black\";\n        this.backCtx.stroke();\n    }\n\n    render() {\n        const {width, height} = this.props;\n        return (\n            <canvas ref='canvas' width={width} height={height}/>\n        )\n    }\n}\n\nexport default BarCanvas;\n"]},"metadata":{},"sourceType":"module"}