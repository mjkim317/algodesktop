{"ast":null,"code":"export function getBubbleSortAnimations(array) {\n  let animations = [];\n  let auxillaryArray = array.slice();\n  bubbleSort(auxillaryArray, animations);\n  const javaScriptSortedArray = array.slice().sort((a, b) => a - b); //console.log(\"sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n\n  array = auxillaryArray;\n  return [animations, array];\n}\n\nfunction bubbleSort(auxillaryArray, animations) {\n  const N = auxillaryArray.length;\n\n  for (let i = 0; i < N - 1; i++) {\n    for (let j = 0; j < N - i - 1; j++) {\n      animations.push([j, j + 1]);\n      animations.push([j, j + 1]);\n\n      if (auxillaryArray[j] > auxillaryArray[j + 1]) {\n        animations.push([j, auxillaryArray[j + 1]]);\n        animations.push([j + 1, auxillaryArray[j]]);\n        swap(auxillaryArray, j, j + 1);\n      } else {\n        animations.push([-1, -1]);\n        animations.push([-1, -1]);\n      }\n    }\n  }\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n  let temp = auxillaryArray[firstIndex];\n  auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n  auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n  if (firstArray.length !== secondArray.length) {\n    return false;\n  }\n\n  for (let i = 0; i < firstArray.length; i++) {\n    if (firstArray[i] !== secondArray[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/Users/admin/Desktop/algo_term_project 2 2/src/bubblesort/SortingAlgorithms/BubbleSort.js"],"names":["getBubbleSortAnimations","array","animations","auxillaryArray","slice","bubbleSort","javaScriptSortedArray","sort","a","b","N","length","i","j","push","swap","firstIndex","secondIndex","temp","arraysAreEqual","firstArray","secondArray"],"mappings":"AAAA,OAAO,SAASA,uBAAT,CAAiCC,KAAjC,EAAwC;AAC3C,MAAIC,UAAU,GAAG,EAAjB;AACA,MAAIC,cAAc,GAAGF,KAAK,CAACG,KAAN,EAArB;AACAC,EAAAA,UAAU,CAACF,cAAD,EAAiBD,UAAjB,CAAV;AACA,QAAMI,qBAAqB,GAAGL,KAAK,CAACG,KAAN,GAAcG,IAAd,CAAmB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAAjC,CAA9B,CAJ2C,CAK3C;;AACAR,EAAAA,KAAK,GAAGE,cAAR;AACA,SAAO,CAACD,UAAD,EAAaD,KAAb,CAAP;AACH;;AAED,SAASI,UAAT,CAAoBF,cAApB,EAAoCD,UAApC,EAAgD;AAC5C,QAAMQ,CAAC,GAAGP,cAAc,CAACQ,MAAzB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,CAAC,GAAG,CAAxB,EAA2BE,CAAC,EAA5B,EAAgC;AAC5B,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,CAAC,GAAGE,CAAJ,GAAQ,CAA5B,EAA+BC,CAAC,EAAhC,EAAoC;AAChCX,MAAAA,UAAU,CAACY,IAAX,CAAgB,CAACD,CAAD,EAAIA,CAAC,GAAG,CAAR,CAAhB;AACAX,MAAAA,UAAU,CAACY,IAAX,CAAgB,CAACD,CAAD,EAAIA,CAAC,GAAG,CAAR,CAAhB;;AACA,UAAIV,cAAc,CAACU,CAAD,CAAd,GAAoBV,cAAc,CAACU,CAAC,GAAG,CAAL,CAAtC,EAA+C;AAC3CX,QAAAA,UAAU,CAACY,IAAX,CAAgB,CAACD,CAAD,EAAIV,cAAc,CAACU,CAAC,GAAG,CAAL,CAAlB,CAAhB;AACAX,QAAAA,UAAU,CAACY,IAAX,CAAgB,CAACD,CAAC,GAAG,CAAL,EAAQV,cAAc,CAACU,CAAD,CAAtB,CAAhB;AACAE,QAAAA,IAAI,CAACZ,cAAD,EAAiBU,CAAjB,EAAoBA,CAAC,GAAG,CAAxB,CAAJ;AACH,OAJD,MAIO;AACHX,QAAAA,UAAU,CAACY,IAAX,CAAgB,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,CAAhB;AACAZ,QAAAA,UAAU,CAACY,IAAX,CAAgB,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,CAAhB;AACH;AACJ;AACJ;AACJ;;AAED,SAASC,IAAT,CAAcZ,cAAd,EAA8Ba,UAA9B,EAA0CC,WAA1C,EAAuD;AACnD,MAAIC,IAAI,GAAGf,cAAc,CAACa,UAAD,CAAzB;AACAb,EAAAA,cAAc,CAACa,UAAD,CAAd,GAA6Bb,cAAc,CAACc,WAAD,CAA3C;AACAd,EAAAA,cAAc,CAACc,WAAD,CAAd,GAA8BC,IAA9B;AACH;;AAED,SAASC,cAAT,CAAwBC,UAAxB,EAAoCC,WAApC,EAAiD;AAC7C,MAAID,UAAU,CAACT,MAAX,KAAsBU,WAAW,CAACV,MAAtC,EAA8C;AAC1C,WAAO,KAAP;AACH;;AACD,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGQ,UAAU,CAACT,MAA/B,EAAuCC,CAAC,EAAxC,EAA4C;AACxC,QAAIQ,UAAU,CAACR,CAAD,CAAV,KAAkBS,WAAW,CAACT,CAAD,CAAjC,EAAsC;AAClC,aAAO,KAAP;AACH;AACJ;;AACD,SAAO,IAAP;AACH","sourcesContent":["export function getBubbleSortAnimations(array) {\n    let animations = [];\n    let auxillaryArray = array.slice();\n    bubbleSort(auxillaryArray, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    //console.log(\"sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction bubbleSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    for (let i = 0; i < N - 1; i++) {\n        for (let j = 0; j < N - i - 1; j++) {\n            animations.push([j, j + 1]);\n            animations.push([j, j + 1]);\n            if (auxillaryArray[j] > auxillaryArray[j + 1]) {\n                animations.push([j, auxillaryArray[j + 1]]);\n                animations.push([j + 1, auxillaryArray[j]]);\n                swap(auxillaryArray, j, j + 1);\n            } else {\n                animations.push([-1, -1]);\n                animations.push([-1, -1]);\n            }\n        }\n    }\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n        if (firstArray[i] !== secondArray[i]) {\n            return false;\n        }\n    }\n    return true;\n}"]},"metadata":{},"sourceType":"module"}