{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/algo_term_project 2 2/src/pages/RandomPage.js\";\nimport React from 'react';\nimport '../bubblesort/SortingVisualizer/SortingViz.css';\nimport { getBubbleSortAnimations } from '../bubblesort/SortingAlgorithms/BubbleSort.js'; // Change this value for the speed of the animations.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ANIMATION_SPEED_MS = 10; // Change this value for the number of bars (value) in the array.\n\nconst NUMBER_OF_ARRAY_BARS = 200; // This is the main color of the array bars.\n\nconst PRIMARY_COLOR = 'turquoise'; // This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = 'red';\nexport default class SortingViz extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.afterFunc = e => {\n      console.log(e);\n      this.setState({\n        array: e\n      });\n      console.log(this.state.array);\n      {\n        this.state.array.map((value, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"array-bar\",\n          style: {\n            height: `${value}px`\n          }\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 17\n        }, this));\n      }\n      this.bubbleSort();\n    };\n\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 680));\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  bubbleSort() {\n    const [animations, sortArray] = getBubbleSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = i % 4 === 0 || i % 4 === 1;\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      if (isColorChange === true) {\n        const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        const [barOneIndex, barTwoIndex] = animations[i];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const [barIndex, newHeight] = animations[i];\n\n        if (barIndex === -1) {\n          continue;\n        }\n\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    } // this.setState({array: sortArray})\n    // const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n    // setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME);\n\n  }\n\n  handleChange(e) {\n    let file = e.target.files[0];\n    let fileReader = new FileReader();\n    let list;\n\n    fileReader.onload = () => {\n      //console.log(fileReader.result);\n      var text = fileReader.result;\n      var array = text.split(\" \");\n      console.log(array);\n\n      for (var i = 0; i < array.length; i++) {\n        array[i] = Number(array[i]);\n      } //console.log(array);\n\n\n      list = array;\n      this.afterFunc(list);\n    };\n\n    fileReader.readAsText(file);\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"array-container\",\n      children: [array.map((value, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"array-bar\",\n        style: {\n          height: `${value * 2}px`\n        }\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.bubbleSort(),\n        children: \"Bubble Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \".txt\",\n        onChange: this.handleChange.bind(this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arrayAreEqual(arrayOne, ArrayTwo) {\n  if (arrayOne.length !== ArrayTwo.length) return false;\n\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== ArrayTwo[i]) return false;\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/Users/admin/Desktop/algo_term_project 2 2/src/pages/RandomPage.js"],"names":["React","getBubbleSortAnimations","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","SortingViz","Component","constructor","props","afterFunc","e","console","log","setState","array","state","map","value","idx","height","bubbleSort","componentDidMount","resetArray","i","push","randomIntFromInterval","animations","sortArray","length","isColorChange","arrayBars","document","getElementsByClassName","color","barOneIndex","barTwoIndex","barOneStyle","style","barTwoStyle","setTimeout","backgroundColor","barIndex","newHeight","barStyle","handleChange","file","target","files","fileReader","FileReader","list","onload","text","result","split","Number","readAsText","render","bind","min","max","Math","floor","random","arrayAreEqual","arrayOne","ArrayTwo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../bubblesort/SortingVisualizer/SortingViz.css';\nimport {getBubbleSortAnimations} from '../bubblesort/SortingAlgorithms/BubbleSort.js'\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 10;\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 200;\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\nexport default class SortingViz extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            array: []\n        }\n    }\n\n    componentDidMount(){\n        this.resetArray();\n    }\n\n    resetArray(){\n        const array = [];\n        for(let i=0;i<NUMBER_OF_ARRAY_BARS;i++){\n            array.push(randomIntFromInterval(5,680))\n        }\n        this.setState({array})\n    }\n\n    bubbleSort(){\n        const [animations,sortArray] = getBubbleSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (i % 4 === 0) || (i % 4 === 1);\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (i % 4 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);\n            }\n        }\n        // this.setState({array: sortArray})\n        // const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n        // setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME);\n    }\n\n    afterFunc = (e) => {\n        console.log(e);\n        this.setState( {array: e});\n        console.log(this.state.array);\n        {this.state.array.map((value,idx) => (\n                <div\n                className=\"array-bar\"\n                 key={idx}\n                 style={{height: `${value}px`}}\n                 ></div>\n            ))}\n        this.bubbleSort();\n    }\n\n    handleChange(e){\n        let file = e.target.files[0];\n        let fileReader = new FileReader();\n        let list;\n        fileReader.onload = () => {\n            //console.log(fileReader.result);\n            var text = fileReader.result\n            var array = text.split(\" \");\n            console.log(array);\n            for(var i=0; i<array.length; i++) {\n                array[i] = Number(array[i]);\n            }\n            //console.log(array);\n            list = array;\n            this.afterFunc(list);\n        };\n        fileReader.readAsText(file);\n    }\n\n\n\n\n    render(){\n        const {array} = this.state;\n        return(\n            <div className=\"array-container\">\n            {array.map((value,idx) => (\n                <div\n                className=\"array-bar\"\n                 key={idx}\n                 style={{height: `${value*2}px`}}\n                 ></div>\n            ))}\n            <br></br>\n            <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n            <input type= \"file\" accept='.txt' onChange={this.handleChange.bind(this)}/>\n            </div>\n        )\n    }\n}\n\nfunction randomIntFromInterval(min, max){\n    return Math.floor(Math.random() * (max-min+1) + min);\n}\n\nfunction arrayAreEqual(arrayOne,ArrayTwo){\n    if(arrayOne.length !== ArrayTwo.length) return false;\n    for(let i=0;i<arrayOne.length;i++){\n        if(arrayOne[i] !== ArrayTwo[i]) return false;\n    }\n    return true;\n}"]},"metadata":{},"sourceType":"module"}