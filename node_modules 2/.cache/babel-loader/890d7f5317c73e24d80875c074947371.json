{"ast":null,"code":"import SortType from \"./SortType\";\nimport BubbleSort from \"./BubbleSort\";\nimport SelectionSort from \"./SelectionSort\";\nimport InsertionSort from \"./InsertionSort\";\nimport BottomUpMergeSort from \"./BottomUpMergeSort\";\nimport QuickSort from \"./QuickSort\";\nimport HeapSort from \"./HeapSort\";\n\nclass SortFactory {\n  constructor() {\n    this.getSort = (type, elements, delay, handler, stopHandler) => {\n      if (this.sorts[type] === undefined) {\n        this.sorts[type] = getSortInstance(type);\n      }\n\n      this.sorts[type].elements = elements;\n      this.sorts[type].delay = delay;\n      this.sorts[type].handler = handler;\n      this.sorts[type].stopHandler = stopHandler;\n      return this.sorts[type];\n    };\n\n    this.sorts = [];\n  }\n\n}\n\nfunction getSortInstance(type) {\n  switch (type) {\n    case SortType.Bubble:\n      return new BubbleSort();\n\n    case SortType.Selection:\n      return new SelectionSort();\n\n    case SortType.Insertion:\n      return new InsertionSort();\n\n    case SortType.Merge:\n      return new BottomUpMergeSort();\n\n    case SortType.Quick:\n      return new QuickSort();\n\n    case SortType.Heap:\n      return new HeapSort();\n\n    default:\n      return null;\n  }\n}\n\nexport default SortFactory;","map":{"version":3,"sources":["/Users/admin/Desktop/algo_term_project/src/sort/SortFactory.js"],"names":["SortType","BubbleSort","SelectionSort","InsertionSort","BottomUpMergeSort","QuickSort","HeapSort","SortFactory","constructor","getSort","type","elements","delay","handler","stopHandler","sorts","undefined","getSortInstance","Bubble","Selection","Insertion","Merge","Quick","Heap"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,YAArB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,MAAMC,WAAN,CAAkB;AACdC,EAAAA,WAAW,GAAG;AAAA,SAIdC,OAJc,GAIJ,CAACC,IAAD,EAAOC,QAAP,EAAiBC,KAAjB,EAAwBC,OAAxB,EAAiCC,WAAjC,KAAiD;AACvD,UAAI,KAAKC,KAAL,CAAWL,IAAX,MAAqBM,SAAzB,EAAoC;AAChC,aAAKD,KAAL,CAAWL,IAAX,IAAmBO,eAAe,CAACP,IAAD,CAAlC;AACH;;AACD,WAAKK,KAAL,CAAWL,IAAX,EAAiBC,QAAjB,GAA4BA,QAA5B;AACA,WAAKI,KAAL,CAAWL,IAAX,EAAiBE,KAAjB,GAAyBA,KAAzB;AACA,WAAKG,KAAL,CAAWL,IAAX,EAAiBG,OAAjB,GAA2BA,OAA3B;AACA,WAAKE,KAAL,CAAWL,IAAX,EAAiBI,WAAjB,GAA+BA,WAA/B;AACA,aAAO,KAAKC,KAAL,CAAWL,IAAX,CAAP;AACH,KAba;;AACV,SAAKK,KAAL,GAAa,EAAb;AACH;;AAHa;;AAiBlB,SAASE,eAAT,CAAyBP,IAAzB,EAA+B;AAC3B,UAAQA,IAAR;AACI,SAAKV,QAAQ,CAACkB,MAAd;AACI,aAAO,IAAIjB,UAAJ,EAAP;;AACJ,SAAKD,QAAQ,CAACmB,SAAd;AACI,aAAO,IAAIjB,aAAJ,EAAP;;AACJ,SAAKF,QAAQ,CAACoB,SAAd;AACI,aAAO,IAAIjB,aAAJ,EAAP;;AACJ,SAAKH,QAAQ,CAACqB,KAAd;AACI,aAAO,IAAIjB,iBAAJ,EAAP;;AACJ,SAAKJ,QAAQ,CAACsB,KAAd;AACI,aAAO,IAAIjB,SAAJ,EAAP;;AACJ,SAAKL,QAAQ,CAACuB,IAAd;AACI,aAAO,IAAIjB,QAAJ,EAAP;;AACJ;AACI,aAAO,IAAP;AAdR;AAgBH;;AAED,eAAeC,WAAf","sourcesContent":["import SortType from \"./SortType\";\nimport BubbleSort from \"./BubbleSort\";\nimport SelectionSort from \"./SelectionSort\";\nimport InsertionSort from \"./InsertionSort\";\nimport BottomUpMergeSort from \"./BottomUpMergeSort\";\nimport QuickSort from \"./QuickSort\";\nimport HeapSort from \"./HeapSort\";\n\nclass SortFactory {\n    constructor() {\n        this.sorts = [];\n    }\n\n    getSort = (type, elements, delay, handler, stopHandler) => {\n        if (this.sorts[type] === undefined) {\n            this.sorts[type] = getSortInstance(type);\n        }\n        this.sorts[type].elements = elements;\n        this.sorts[type].delay = delay;\n        this.sorts[type].handler = handler;\n        this.sorts[type].stopHandler = stopHandler;\n        return this.sorts[type];\n    }\n}\n\nfunction getSortInstance(type) {\n    switch (type) {\n        case SortType.Bubble:\n            return new BubbleSort();\n        case SortType.Selection:\n            return new SelectionSort();\n        case SortType.Insertion:\n            return new InsertionSort();\n        case SortType.Merge:\n            return new BottomUpMergeSort();\n        case SortType.Quick:\n            return new QuickSort();\n        case SortType.Heap:\n            return new HeapSort();\n        default:\n            return null;\n    }\n}\n\nexport default SortFactory;"]},"metadata":{},"sourceType":"module"}