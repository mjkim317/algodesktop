{"ast":null,"code":"export function getInsertionSortAnimations(array) {\n  let animations = [];\n  let auxillaryArray = array.slice();\n  insertionSort(auxillaryArray, animations);\n  const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n  console.log(\"sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n  array = auxillaryArray;\n  return [animations, array];\n}\n\nfunction insertionSort(auxillaryArray, animations) {\n  const N = auxillaryArray.length;\n\n  for (let i = 1; i < N; i++) {\n    let key = auxillaryArray[i];\n    let j = i - 1;\n    animations.push([\"comparision1\", j, i]);\n    animations.push([\"comparision2\", j, i]);\n\n    while (j >= 0 && auxillaryArray[j] > key) {\n      animations.push([\"overwrite\", j + 1, auxillaryArray[j]]);\n      auxillaryArray[j + 1] = auxillaryArray[j];\n      j = j - 1;\n\n      if (j >= 0) {\n        animations.push([\"comparision1\", j, i]);\n        animations.push([\"comparision2\", j, i]);\n      }\n    }\n\n    animations.push([\"overwrite\", j + 1, key]);\n    auxillaryArray[j + 1] = key;\n  }\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n  if (firstArray.length !== secondArray.length) {\n    return false;\n  }\n\n  for (let i = 0; i < firstArray.length; i++) {\n    if (firstArray[i] !== secondArray[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/Users/admin/Desktop/algo_term_project 2 2/src/bubblesort/SortingAlgorithms/InsertionSort.js"],"names":["getInsertionSortAnimations","array","animations","auxillaryArray","slice","insertionSort","javaScriptSortedArray","sort","a","b","console","log","arraysAreEqual","N","length","i","key","j","push","firstArray","secondArray"],"mappings":"AAAA,OAAO,SAASA,0BAAT,CAAoCC,KAApC,EAA2C;AAC9C,MAAIC,UAAU,GAAG,EAAjB;AACA,MAAIC,cAAc,GAAGF,KAAK,CAACG,KAAN,EAArB;AACAC,EAAAA,aAAa,CAACF,cAAD,EAAiBD,UAAjB,CAAb;AACA,QAAMI,qBAAqB,GAAGL,KAAK,CAACG,KAAN,GAAcG,IAAd,CAAmB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAAjC,CAA9B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCC,cAAc,CAACN,qBAAD,EAAwBH,cAAxB,CAApD;AACAF,EAAAA,KAAK,GAAGE,cAAR;AACA,SAAO,CAACD,UAAD,EAAaD,KAAb,CAAP;AACH;;AAED,SAASI,aAAT,CAAuBF,cAAvB,EAAuCD,UAAvC,EAAmD;AAC/C,QAAMW,CAAC,GAAGV,cAAc,CAACW,MAAzB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,CAApB,EAAuBE,CAAC,EAAxB,EAA4B;AACxB,QAAIC,GAAG,GAAGb,cAAc,CAACY,CAAD,CAAxB;AACA,QAAIE,CAAC,GAAGF,CAAC,GAAG,CAAZ;AACAb,IAAAA,UAAU,CAACgB,IAAX,CAAgB,CAAC,cAAD,EAAiBD,CAAjB,EAAoBF,CAApB,CAAhB;AACAb,IAAAA,UAAU,CAACgB,IAAX,CAAgB,CAAC,cAAD,EAAiBD,CAAjB,EAAoBF,CAApB,CAAhB;;AACA,WAAOE,CAAC,IAAI,CAAL,IAAUd,cAAc,CAACc,CAAD,CAAd,GAAoBD,GAArC,EAA0C;AACtCd,MAAAA,UAAU,CAACgB,IAAX,CAAgB,CAAC,WAAD,EAAcD,CAAC,GAAG,CAAlB,EAAqBd,cAAc,CAACc,CAAD,CAAnC,CAAhB;AACAd,MAAAA,cAAc,CAACc,CAAC,GAAG,CAAL,CAAd,GAAwBd,cAAc,CAACc,CAAD,CAAtC;AACAA,MAAAA,CAAC,GAAGA,CAAC,GAAG,CAAR;;AACA,UAAIA,CAAC,IAAI,CAAT,EAAY;AACRf,QAAAA,UAAU,CAACgB,IAAX,CAAgB,CAAC,cAAD,EAAiBD,CAAjB,EAAoBF,CAApB,CAAhB;AACAb,QAAAA,UAAU,CAACgB,IAAX,CAAgB,CAAC,cAAD,EAAiBD,CAAjB,EAAoBF,CAApB,CAAhB;AACH;AACJ;;AACDb,IAAAA,UAAU,CAACgB,IAAX,CAAgB,CAAC,WAAD,EAAcD,CAAC,GAAG,CAAlB,EAAqBD,GAArB,CAAhB;AACAb,IAAAA,cAAc,CAACc,CAAC,GAAG,CAAL,CAAd,GAAwBD,GAAxB;AACH;AACJ;;AAED,SAASJ,cAAT,CAAwBO,UAAxB,EAAoCC,WAApC,EAAiD;AAC7C,MAAID,UAAU,CAACL,MAAX,KAAsBM,WAAW,CAACN,MAAtC,EAA8C;AAC1C,WAAO,KAAP;AACH;;AACD,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGI,UAAU,CAACL,MAA/B,EAAuCC,CAAC,EAAxC,EAA4C;AACxC,QAAII,UAAU,CAACJ,CAAD,CAAV,KAAkBK,WAAW,CAACL,CAAD,CAAjC,EAAsC;AAClC,aAAO,KAAP;AACH;AACJ;;AACD,SAAO,IAAP;AACH","sourcesContent":["export function getInsertionSortAnimations(array) {\n    let animations = [];\n    let auxillaryArray = array.slice();\n    insertionSort(auxillaryArray, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction insertionSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    for (let i = 1; i < N; i++) {\n        let key = auxillaryArray[i];\n        let j = i - 1;\n        animations.push([\"comparision1\", j, i]);\n        animations.push([\"comparision2\", j, i]);\n        while (j >= 0 && auxillaryArray[j] > key) {\n            animations.push([\"overwrite\", j + 1, auxillaryArray[j]]);\n            auxillaryArray[j + 1] = auxillaryArray[j];\n            j = j - 1;\n            if (j >= 0) {\n                animations.push([\"comparision1\", j, i]);\n                animations.push([\"comparision2\", j, i]);\n            }\n        }\n        animations.push([\"overwrite\", j + 1, key]);\n        auxillaryArray[j + 1] = key;\n    }\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n        if (firstArray[i] !== secondArray[i]) {\n            return false;\n        }\n    }\n    return true;\n}"]},"metadata":{},"sourceType":"module"}