{"ast":null,"code":"export function getQuickSortAnimations(array) {\n  let animations = [];\n  let auxillaryArray = array.slice();\n  quickSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\n  const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n  console.log(\"sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n  array = auxillaryArray;\n  return [animations, array];\n}\ngetQuickSortAnimations([7, 2, 1, 6]);\n\nfunction quickSort(auxillaryArray, startIndex, endIndex, animations) {\n  let pivotIndex;\n\n  if (startIndex < endIndex) {\n    pivotIndex = partitionArray(auxillaryArray, startIndex, endIndex, animations);\n    quickSort(auxillaryArray, startIndex, pivotIndex - 1, animations);\n    quickSort(auxillaryArray, pivotIndex + 1, endIndex, animations);\n  }\n}\n\nfunction partitionArray(auxillaryArray, startIndex, endIndex, animations) {\n  let pivot = auxillaryArray[endIndex];\n  let pivotIndex = startIndex;\n\n  for (let i = startIndex; i <= endIndex - 1; i++) {\n    animations.push([i, endIndex]);\n    animations.push([i, endIndex]);\n\n    if (auxillaryArray[i] <= pivot) {\n      //Swap these two heights\n      animations.push([i, auxillaryArray[pivotIndex]]);\n      animations.push([pivotIndex, auxillaryArray[i]]);\n      swap(auxillaryArray, i, pivotIndex);\n      pivotIndex++;\n    } else {\n      animations.push([-1, -1]);\n      animations.push([-1, -1]);\n    }\n\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n  }\n\n  animations.push([-1, -1]);\n  animations.push([-1, -1]);\n  animations.push([-1, -1]);\n  animations.push([-1, -1]); //Swap these two heights\n\n  animations.push([pivotIndex, auxillaryArray[endIndex]]);\n  animations.push([endIndex, auxillaryArray[pivotIndex]]);\n  swap(auxillaryArray, pivotIndex, endIndex);\n  return pivotIndex;\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n  let temp = auxillaryArray[firstIndex];\n  auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n  auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n  if (firstArray.length !== secondArray.length) {\n    return false;\n  }\n\n  for (let i = 0; i < firstArray.length; i++) {\n    if (firstArray[i] !== secondArray[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/Users/admin/Desktop/algo_term_project 2 2/src/bubblesort/SortingAlgorithms/QuickSort.js"],"names":["getQuickSortAnimations","array","animations","auxillaryArray","slice","quickSort","length","javaScriptSortedArray","sort","a","b","console","log","arraysAreEqual","startIndex","endIndex","pivotIndex","partitionArray","pivot","i","push","swap","firstIndex","secondIndex","temp","firstArray","secondArray"],"mappings":"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","sourcesContent":["export function getQuickSortAnimations(array) {\n    let animations = [];\n    let auxillaryArray = array.slice();\n    quickSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\ngetQuickSortAnimations([7, 2, 1, 6]);\n\nfunction quickSort(auxillaryArray, startIndex, endIndex, animations) {\n    let pivotIndex;\n    if (startIndex < endIndex) {\n        pivotIndex = partitionArray(auxillaryArray, startIndex, endIndex, animations);\n        quickSort(auxillaryArray, startIndex, pivotIndex - 1, animations);\n        quickSort(auxillaryArray, pivotIndex + 1, endIndex, animations);\n    }\n}\n\nfunction partitionArray(auxillaryArray, startIndex, endIndex, animations) {\n    let pivot = auxillaryArray[endIndex];\n    let pivotIndex = startIndex;\n    for (let i = startIndex; i <= endIndex - 1; i++) {\n        animations.push([i, endIndex]);\n        animations.push([i, endIndex]);\n        if (auxillaryArray[i] <= pivot) {\n            //Swap these two heights\n            animations.push([i, auxillaryArray[pivotIndex]]);\n            animations.push([pivotIndex, auxillaryArray[i]]);\n            swap(auxillaryArray, i, pivotIndex);\n            pivotIndex++;\n        } else {\n            animations.push([-1, -1]);\n            animations.push([-1, -1]);\n        }\n        animations.push([-1, -1]);\n        animations.push([-1, -1]);\n    }\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    //Swap these two heights\n    animations.push([pivotIndex, auxillaryArray[endIndex]]);\n    animations.push([endIndex, auxillaryArray[pivotIndex]]);\n    swap(auxillaryArray, pivotIndex, endIndex);\n    return pivotIndex;\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n        if (firstArray[i] !== secondArray[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n"]},"metadata":{},"sourceType":"module"}