{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/algo_term_project 2 2/src/bubblesort/SortingVisualizer/SortingViz.jsx\";\nimport React from 'react';\nimport { getMergeSort } from '../sortingAlgorithms/MergeSort.js';\nimport { getBubbleSortAnimations } from '../sortingAlgorithms/BubbleSort.js';\nimport { getSelectionSortAnimations } from '../sortingAlgorithms/SelectionSort.js';\nimport { getInsertionSortAnimations } from '../sortingAlgorithms/InsertionSort.js';\nimport { getQuickSortAnimations } from '../sortingAlgorithms/QuickSort.js';\nimport './SortingVisualizer.css'; // Change this value for the speed of the animations.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ANIMATION_SPEED_MS = 1; // Change this value for the number of bars (value) in the array.\n\nconst NUMBER_OF_ARRAY_BARS = 200; // This is the main color of the array bars.\n\nconst PRIMARY_COLOR = 'turquoise'; // This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = 'red';\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 680));\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  mergeSort() {\n    const animations = getMergeSort(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {\n    const [animations, sortArray] = getQuickSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length - 1; i++) {\n      const isColorChange = i % 6 === 0 || i % 6 === 1;\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      if (isColorChange === true) {\n        const color = i % 6 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        const [barOneIndex, barTwoIndex] = animations[i];\n\n        if (barOneIndex === -1) {\n          continue;\n        }\n\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const [barIndex, newHeight] = animations[i];\n\n        if (barIndex === -1) {\n          continue;\n        }\n\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    } // this.setState({array: sortArray})\n\n\n    const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\n  }\n\n  insertionSort() {\n    const [animations, sortArray] = getInsertionSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = animations[i][0] === \"comparision1\" || animations[i][0] === \"comparision2\";\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      if (isColorChange === true) {\n        const color = animations[i][0] === \"comparision1\" ? SECONDARY_COLOR : PRIMARY_COLOR;\n        const [temp, barOneIndex, barTwoIndex] = animations[i];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const [temp, barIndex, newHeight] = animations[i];\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    } // this.setState({array: sortArray})\n\n\n    const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\n  }\n\n  selectionSort() {\n    const [animations, sortArray] = getSelectionSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = animations[i][0] === \"comparision1\" || animations[i][0] === \"comparision2\";\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      if (isColorChange === true) {\n        const color = animations[i][0] === \"comparision1\" ? SECONDARY_COLOR : PRIMARY_COLOR;\n        const [temp, barOneIndex, barTwoIndex] = animations[i];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const [temp, barIndex, newHeight] = animations[i];\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    } // this.setState({array: sortArray})\n\n\n    const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\n  }\n\n  bubbleSort() {\n    const [animations, sortArray] = getBubbleSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = i % 4 === 0 || i % 4 === 1;\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      if (isColorChange === true) {\n        const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        const [barOneIndex, barTwoIndex] = animations[i];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const [barIndex, newHeight] = animations[i];\n\n        if (barIndex === -1) {\n          continue;\n        }\n\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    } // this.setState({array: sortArray})\n    // const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n    // setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME);\n\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"array-container\",\n      children: [array.map((value, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"array-bar\",\n        style: {\n          height: `${value}px`\n        }\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 17\n      }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.resetArray(),\n        children: \"Reset Array\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.mergeSort(),\n        children: \"Merge Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.quickSort(),\n        children: \"Quick Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.insertionSort(),\n        children: \"Insertion Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.bubbleSort(),\n        children: \"Bubble Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.selectionSort(),\n        children: \"Selection Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arrayAreEqual(arrayOne, ArrayTwo) {\n  if (arrayOne.length !== ArrayTwo.length) return false;\n\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== ArrayTwo[i]) return false;\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/Users/admin/Desktop/algo_term_project 2 2/src/bubblesort/SortingVisualizer/SortingViz.jsx"],"names":["React","getMergeSort","getBubbleSortAnimations","getSelectionSortAnimations","getInsertionSortAnimations","getQuickSortAnimations","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","i","push","randomIntFromInterval","setState","mergeSort","animations","length","arrayBars","document","getElementsByClassName","isColorChange","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","quickSort","sortArray","barOneIndex","barTwoIndex","barIndex","barStyle","RESTORE_TIME","parseInt","insertionSort","temp","selectionSort","bubbleSort","render","map","value","idx","min","max","Math","floor","random","arrayAreEqual","arrayOne","ArrayTwo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {getMergeSort} from '../sortingAlgorithms/MergeSort.js'\nimport {getBubbleSortAnimations} from '../sortingAlgorithms/BubbleSort.js'\nimport {getSelectionSortAnimations} from '../sortingAlgorithms/SelectionSort.js'\nimport {getInsertionSortAnimations} from '../sortingAlgorithms/InsertionSort.js'\nimport {getQuickSortAnimations} from '../sortingAlgorithms/QuickSort.js'\nimport './SortingVisualizer.css';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 1;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 200;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\n\n\n\nexport default class SortingVisualizer extends React.Component{\n    constructor(props){\n        super(props);\n\n        this.state = {\n            array: []\n        }\n    }\n\n    componentDidMount(){\n        this.resetArray();\n    }\n\n    resetArray(){\n        const array = [];\n        for(let i=0;i<NUMBER_OF_ARRAY_BARS;i++){\n            array.push(randomIntFromInterval(5,680))\n        }\n        this.setState({array})\n    }\n    mergeSort(){\n        const animations = getMergeSort(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n    }\n\n    quickSort(){\n        const [animations,sortArray] = getQuickSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length - 1; i++) {\n            const isColorChange = (i % 6 === 0) || (i % 6 === 1);\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (i % 6 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [barOneIndex, barTwoIndex] = animations[i];\n                if(barOneIndex === -1) {\n                    continue;\n                }\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);\n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n\n    }\n\n    insertionSort(){\n        const [animations,sortArray] = getInsertionSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [temp, barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);\n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n\n    }\n\n    selectionSort(){\n        const [animations,sortArray] = getSelectionSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [temp, barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);\n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n\n    }\n\n    bubbleSort(){\n\n        const [animations,sortArray] = getBubbleSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (i % 4 === 0) || (i % 4 === 1);\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (i % 4 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);\n            }\n        }\n        // this.setState({array: sortArray})\n        // const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n        // setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME);\n    }\n\n\n\n\n    render(){\n        const {array} = this.state;\n        return(\n            <div className=\"array-container\">\n            {array.map((value,idx) => (\n                <div\n                className=\"array-bar\"\n                 key={idx}\n                 style={{height: `${value}px`}}\n                 ></div>\n            ))}\n            <br></br>\n            <button onClick={() => this.resetArray()}>Reset Array</button>\n            <button onClick={() => this.mergeSort()}>Merge Sort</button>\n            <button onClick={() => this.quickSort()}>Quick Sort</button>\n            <button onClick={() => this.insertionSort()}>Insertion Sort</button>\n            <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n            <button onClick={() => this.selectionSort()}>Selection Sort</button>\n            </div>\n        )\n    }\n}\n\nfunction randomIntFromInterval(min, max){\n    return Math.floor(Math.random() * (max-min+1) + min);\n}\n\nfunction arrayAreEqual(arrayOne,ArrayTwo){\n    if(arrayOne.length !== ArrayTwo.length) return false;\n    for(let i=0;i<arrayOne.length;i++){\n        if(arrayOne[i] !== ArrayTwo[i]) return false;\n    }\n    return true;\n}\n"]},"metadata":{},"sourceType":"module"}