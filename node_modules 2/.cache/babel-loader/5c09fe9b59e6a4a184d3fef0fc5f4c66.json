{"ast":null,"code":"export function getSelectionSortAnimations(array) {\n  let animations = [];\n  let auxillaryArray = array.slice();\n  selectionSort(auxillaryArray, animations);\n  const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n  console.log(\"sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n  array = auxillaryArray;\n  return [animations, array];\n}\n\nfunction selectionSort(auxillaryArray, animations) {\n  const N = auxillaryArray.length;\n\n  for (let i = 0; i < N - 1; i++) {\n    let minIndex = i; //Finding minimum element in unsorted array\n\n    for (let j = i + 1; j < N; j++) {\n      animations.push([\"comparision1\", j, minIndex]);\n      animations.push([\"comparision2\", j, minIndex]);\n\n      if (auxillaryArray[j] < auxillaryArray[minIndex]) {\n        minIndex = j;\n      }\n    }\n\n    animations.push([\"swap\", minIndex, auxillaryArray[i]]);\n    animations.push([\"swap\", i, auxillaryArray[minIndex]]); // Swap the found minimum element with the first element\n\n    swap(auxillaryArray, minIndex, i);\n  }\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n  let temp = auxillaryArray[firstIndex];\n  auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n  auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n  if (firstArray.length !== secondArray.length) {\n    return false;\n  }\n\n  for (let i = 0; i < firstArray.length; i++) {\n    if (firstArray[i] !== secondArray[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/Users/admin/Desktop/algo_term_project 2 2/src/bubblesort/SortingAlgorithms/SelectionSort.js"],"names":["getSelectionSortAnimations","array","animations","auxillaryArray","slice","selectionSort","javaScriptSortedArray","sort","a","b","console","log","arraysAreEqual","N","length","i","minIndex","j","push","swap","firstIndex","secondIndex","temp","firstArray","secondArray"],"mappings":"AAAA,OAAO,SAASA,0BAAT,CAAoCC,KAApC,EAA2C;AAC9C,MAAIC,UAAU,GAAG,EAAjB;AACA,MAAIC,cAAc,GAAGF,KAAK,CAACG,KAAN,EAArB;AACAC,EAAAA,aAAa,CAACF,cAAD,EAAiBD,UAAjB,CAAb;AACA,QAAMI,qBAAqB,GAAGL,KAAK,CAACG,KAAN,GAAcG,IAAd,CAAmB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAAjC,CAA9B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCC,cAAc,CAACN,qBAAD,EAAwBH,cAAxB,CAApD;AACAF,EAAAA,KAAK,GAAGE,cAAR;AACA,SAAO,CAACD,UAAD,EAAaD,KAAb,CAAP;AACH;;AAED,SAASI,aAAT,CAAuBF,cAAvB,EAAuCD,UAAvC,EAAmD;AAC/C,QAAMW,CAAC,GAAGV,cAAc,CAACW,MAAzB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,CAAC,GAAG,CAAxB,EAA2BE,CAAC,EAA5B,EAAgC;AAC5B,QAAIC,QAAQ,GAAGD,CAAf,CAD4B,CACV;;AAClB,SAAK,IAAIE,CAAC,GAAGF,CAAC,GAAG,CAAjB,EAAoBE,CAAC,GAAGJ,CAAxB,EAA2BI,CAAC,EAA5B,EAAgC;AAC5Bf,MAAAA,UAAU,CAACgB,IAAX,CAAgB,CAAC,cAAD,EAAiBD,CAAjB,EAAoBD,QAApB,CAAhB;AACAd,MAAAA,UAAU,CAACgB,IAAX,CAAgB,CAAC,cAAD,EAAiBD,CAAjB,EAAoBD,QAApB,CAAhB;;AACA,UAAIb,cAAc,CAACc,CAAD,CAAd,GAAoBd,cAAc,CAACa,QAAD,CAAtC,EAAkD;AAC9CA,QAAAA,QAAQ,GAAGC,CAAX;AACH;AACJ;;AACDf,IAAAA,UAAU,CAACgB,IAAX,CAAgB,CAAC,MAAD,EAASF,QAAT,EAAmBb,cAAc,CAACY,CAAD,CAAjC,CAAhB;AACAb,IAAAA,UAAU,CAACgB,IAAX,CAAgB,CAAC,MAAD,EAASH,CAAT,EAAYZ,cAAc,CAACa,QAAD,CAA1B,CAAhB,EAV4B,CAW5B;;AACAG,IAAAA,IAAI,CAAChB,cAAD,EAAiBa,QAAjB,EAA2BD,CAA3B,CAAJ;AACH;AACJ;;AAED,SAASI,IAAT,CAAchB,cAAd,EAA8BiB,UAA9B,EAA0CC,WAA1C,EAAuD;AACnD,MAAIC,IAAI,GAAGnB,cAAc,CAACiB,UAAD,CAAzB;AACAjB,EAAAA,cAAc,CAACiB,UAAD,CAAd,GAA6BjB,cAAc,CAACkB,WAAD,CAA3C;AACAlB,EAAAA,cAAc,CAACkB,WAAD,CAAd,GAA8BC,IAA9B;AACH;;AAED,SAASV,cAAT,CAAwBW,UAAxB,EAAoCC,WAApC,EAAiD;AAC7C,MAAID,UAAU,CAACT,MAAX,KAAsBU,WAAW,CAACV,MAAtC,EAA8C;AAC1C,WAAO,KAAP;AACH;;AACD,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGQ,UAAU,CAACT,MAA/B,EAAuCC,CAAC,EAAxC,EAA4C;AACxC,QAAIQ,UAAU,CAACR,CAAD,CAAV,KAAkBS,WAAW,CAACT,CAAD,CAAjC,EAAsC;AAClC,aAAO,KAAP;AACH;AACJ;;AACD,SAAO,IAAP;AACH","sourcesContent":["export function getSelectionSortAnimations(array) {\n    let animations = [];\n    let auxillaryArray = array.slice();\n    selectionSort(auxillaryArray, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \", arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction selectionSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    for (let i = 0; i < N - 1; i++) {\n        let minIndex = i; //Finding minimum element in unsorted array\n        for (let j = i + 1; j < N; j++) {\n            animations.push([\"comparision1\", j, minIndex]);\n            animations.push([\"comparision2\", j, minIndex]);\n            if (auxillaryArray[j] < auxillaryArray[minIndex]) {\n                minIndex = j;\n            }\n        }\n        animations.push([\"swap\", minIndex, auxillaryArray[i]]);\n        animations.push([\"swap\", i, auxillaryArray[minIndex]]);\n        // Swap the found minimum element with the first element\n        swap(auxillaryArray, minIndex, i);\n    }\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n        if (firstArray[i] !== secondArray[i]) {\n            return false;\n        }\n    }\n    return true;\n}"]},"metadata":{},"sourceType":"module"}