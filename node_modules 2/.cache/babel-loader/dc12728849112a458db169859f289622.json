{"ast":null,"code":"import ElementMakeType from \"./ElementMakeType\";\nimport State from \"./State\";\nimport Color from \"./Color\";\n\nclass Element {\n  constructor() {\n    this.initElements = (length, type) => {\n      this.arr = [];\n      let offset;\n\n      switch (type) {\n        case ElementMakeType.RANDOM:\n          for (let i = 0; i < length; i++) {\n            const height = Math.random() * 100;\n            this.arr.push(new State(height, Color.WHITE));\n          }\n\n          break;\n\n        case ElementMakeType.ASCENDING:\n          offset = 100 / (length + 1);\n          this.arr.push(new State(offset, Color.WHITE));\n\n          for (let i = 0; i < length - 1; i++) {\n            this.arr.push(new State(this.arr[i].height + offset, Color.WHITE));\n          }\n\n          break;\n\n        case ElementMakeType.DESCENDING:\n          offset = 100 / (length + 1);\n          this.arr.push(new State(100 - offset, Color.WHITE));\n\n          for (let i = 0; i < length - 1; i++) {\n            this.arr.push(new State(this.arr[i].height - offset, Color.WHITE));\n          }\n\n          break;\n\n        case ElementMakeType.SELECTFILE:\n          offset = 100 / (length + 1);\n          this.arr.push(new State(100 - offset, Color.WHITE));\n\n          for (let i = 0; i < length - 1; i++) {\n            this.arr.push(new State(this.arr[i].height - offset, Color.WHITE));\n          }\n\n          break;\n\n        /*for(let i = 0; i < length; i++) {\n            //const height = array[i] * 100;\n            this.arr.push(new State(height, Color.WHITE));\n        }\n        break;\n        */\n\n        default:\n          break;\n      }\n    };\n\n    this.arr = null;\n  }\n\n}\n\nexport default Element;","map":{"version":3,"sources":["/Users/admin/Desktop/algo_term_project/src/sort/Element.js"],"names":["ElementMakeType","State","Color","Element","constructor","initElements","length","type","arr","offset","RANDOM","i","height","Math","random","push","WHITE","ASCENDING","DESCENDING","SELECTFILE"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,mBAA5B;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AAEA,MAAMC,OAAN,CAAc;AACVC,EAAAA,WAAW,GAAG;AAAA,SAIdC,YAJc,GAIC,CAACC,MAAD,EAASC,IAAT,KAAkB;AAC7B,WAAKC,GAAL,GAAW,EAAX;AACA,UAAIC,MAAJ;;AACA,cAAQF,IAAR;AACI,aAAKP,eAAe,CAACU,MAArB;AACI,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,MAApB,EAA4BK,CAAC,EAA7B,EAAiC;AAC7B,kBAAMC,MAAM,GAAGC,IAAI,CAACC,MAAL,KAAgB,GAA/B;AACA,iBAAKN,GAAL,CAASO,IAAT,CAAc,IAAId,KAAJ,CAAUW,MAAV,EAAkBV,KAAK,CAACc,KAAxB,CAAd;AACH;;AACD;;AACJ,aAAKhB,eAAe,CAACiB,SAArB;AACIR,UAAAA,MAAM,GAAG,OAAOH,MAAM,GAAG,CAAhB,CAAT;AACA,eAAKE,GAAL,CAASO,IAAT,CAAc,IAAId,KAAJ,CAAUQ,MAAV,EAAkBP,KAAK,CAACc,KAAxB,CAAd;;AACA,eAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,MAAM,GAAG,CAA7B,EAAgCK,CAAC,EAAjC,EAAqC;AACjC,iBAAKH,GAAL,CAASO,IAAT,CAAc,IAAId,KAAJ,CAAU,KAAKO,GAAL,CAASG,CAAT,EAAYC,MAAZ,GAAqBH,MAA/B,EAAuCP,KAAK,CAACc,KAA7C,CAAd;AACH;;AACD;;AACJ,aAAKhB,eAAe,CAACkB,UAArB;AACIT,UAAAA,MAAM,GAAG,OAAOH,MAAM,GAAG,CAAhB,CAAT;AACA,eAAKE,GAAL,CAASO,IAAT,CAAc,IAAId,KAAJ,CAAU,MAAMQ,MAAhB,EAAwBP,KAAK,CAACc,KAA9B,CAAd;;AACA,eAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,MAAM,GAAG,CAA7B,EAAgCK,CAAC,EAAjC,EAAqC;AACjC,iBAAKH,GAAL,CAASO,IAAT,CAAc,IAAId,KAAJ,CAAU,KAAKO,GAAL,CAASG,CAAT,EAAYC,MAAZ,GAAqBH,MAA/B,EAAuCP,KAAK,CAACc,KAA7C,CAAd;AACH;;AACD;;AAEJ,aAAKhB,eAAe,CAACmB,UAArB;AACIV,UAAAA,MAAM,GAAG,OAAOH,MAAM,GAAG,CAAhB,CAAT;AACA,eAAKE,GAAL,CAASO,IAAT,CAAc,IAAId,KAAJ,CAAU,MAAMQ,MAAhB,EAAwBP,KAAK,CAACc,KAA9B,CAAd;;AACA,eAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,MAAM,GAAG,CAA7B,EAAgCK,CAAC,EAAjC,EAAqC;AACjC,iBAAKH,GAAL,CAASO,IAAT,CAAc,IAAId,KAAJ,CAAU,KAAKO,GAAL,CAASG,CAAT,EAAYC,MAAZ,GAAqBH,MAA/B,EAAuCP,KAAK,CAACc,KAA7C,CAAd;AACH;;AACD;;AACC;AACjB;AACA;AACA;AACA;AACA;;AAEY;AACI;AArCR;AAuCH,KA9Ca;;AACV,SAAKR,GAAL,GAAW,IAAX;AACH;;AAHS;;AAkDd,eAAeL,OAAf","sourcesContent":["import ElementMakeType from \"./ElementMakeType\";\nimport State from \"./State\";\nimport Color from \"./Color\";\n\nclass Element {\n    constructor() {\n        this.arr = null;\n    }\n\n    initElements = (length, type) => {\n        this.arr = [];\n        let offset;\n        switch (type) {\n            case ElementMakeType.RANDOM:\n                for (let i = 0; i < length; i++) {\n                    const height = Math.random() * 100;\n                    this.arr.push(new State(height, Color.WHITE));\n                }\n                break;\n            case ElementMakeType.ASCENDING:\n                offset = 100 / (length + 1);\n                this.arr.push(new State(offset, Color.WHITE));\n                for (let i = 0; i < length - 1; i++) {\n                    this.arr.push(new State(this.arr[i].height + offset, Color.WHITE));\n                }\n                break;\n            case ElementMakeType.DESCENDING:\n                offset = 100 / (length + 1);\n                this.arr.push(new State(100 - offset, Color.WHITE));\n                for (let i = 0; i < length - 1; i++) {\n                    this.arr.push(new State(this.arr[i].height - offset, Color.WHITE));\n                }\n                break ;\n\n            case ElementMakeType.SELECTFILE:\n                offset = 100 / (length + 1);\n                this.arr.push(new State(100 - offset, Color.WHITE));\n                for (let i = 0; i < length - 1; i++) {\n                    this.arr.push(new State(this.arr[i].height - offset, Color.WHITE));\n                }\n                break ;\n                 /*for(let i = 0; i < length; i++) {\n                     //const height = array[i] * 100;\n                     this.arr.push(new State(height, Color.WHITE));\n                 }\n                 break;\n                 */\n\n            default:\n                break;\n        }\n    }\n}\n\nexport default Element;"]},"metadata":{},"sourceType":"module"}