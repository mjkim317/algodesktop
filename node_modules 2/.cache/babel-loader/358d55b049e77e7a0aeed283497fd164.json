{"ast":null,"code":"export function getHeapSortAnimations(array) {\n  let animations = [];\n  let auxillaryArray = array.slice();\n  let len = array.length;\n  HeapSortHelper(auxillaryArray, animations, len);\n  array = auxillaryArray;\n  return [animations, array];\n}\n\nfunction HeapSortHelper(auxillaryArray, animations, len) {\n  for (let i = len / 2 - 1; i >= 0; --i) {\n    HeapSort(auxillaryArray, animations, i, len);\n  }\n\n  for (let i = len - 1; i >= 0; --i) {\n    swap(auxillaryArray, 0, i); //HeapSort(auxillaryArray, animations, 0, i);\n\n    for (let j = (i + 1) / 2 - 1; j >= 0; --j) {\n      HeapSort(auxillaryArray, animations, j, i);\n    }\n  }\n}\n\n_c = HeapSortHelper;\n\nfunction HeapSort(auxillaryArray, animations, parent, size) {\n  var temp_parent = parent;\n  var left_child = parent * 2 + 1;\n  var right_child = parent * 2 + 2;\n  console.log(auxillaryArray);\n\n  if (left_child < size && auxillaryArray[temp_parent] < auxillaryArray[left_child]) {\n    temp_parent = left_child;\n  }\n\n  if (right_child < size && auxillaryArray[temp_parent] < auxillaryArray[right_child]) {\n    temp_parent = right_child;\n  }\n\n  if (parent != temp_parent) {\n    animations.push([temp_parent, parent]);\n    animations.push([temp_parent, parent]);\n    animations.push([parent, auxillaryArray[temp_parent]]);\n    animations.push([temp_parent, auxillaryArray[parent]]);\n    swap(auxillaryArray, parent, temp_parent);\n    HeapSort(auxillaryArray, temp_parent, size);\n  }\n  /*else {\n      animations.push([-1, -1]);\n      animations.push([-1, -1]);\n  }*/\n\n}\n\n_c2 = HeapSort;\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n  let temp = auxillaryArray[firstIndex];\n  auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n  auxillaryArray[secondIndex] = temp;\n}\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"HeapSortHelper\");\n$RefreshReg$(_c2, \"HeapSort\");","map":{"version":3,"sources":["/Users/admin/Desktop/algo_term_project 2 2/src/bubblesort/SortingAlgorithms/HeapSort.js"],"names":["getHeapSortAnimations","array","animations","auxillaryArray","slice","len","length","HeapSortHelper","i","HeapSort","swap","j","parent","size","temp_parent","left_child","right_child","console","log","push","firstIndex","secondIndex","temp"],"mappings":"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","sourcesContent":["export function getHeapSortAnimations(array) {\n    let animations = [];\n    let auxillaryArray = array.slice();\n    let len = array.length;\n    HeapSortHelper(auxillaryArray, animations, len);\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction HeapSortHelper(auxillaryArray, animations, len)\n{\n    for(let i = len/2-1; i>=0; --i){\n        HeapSort(auxillaryArray, animations, i, len);\n    }\n\n    for(let i = len-1; i>=0; --i){\n        swap(auxillaryArray, 0, i);\n        //HeapSort(auxillaryArray, animations, 0, i);\n\n        for(let j = (i+1)/2-1; j>=0; --j){\n            HeapSort(auxillaryArray, animations, j, i);\n        }\n    }\n}\n\nfunction HeapSort(auxillaryArray, animations, parent, size) {\n    var temp_parent = parent;\n    var left_child = parent * 2 + 1;\n    var right_child = parent * 2 + 2;\n\n    console.log(auxillaryArray);\n\n    if(left_child < size && auxillaryArray[temp_parent] < auxillaryArray[left_child]){\n        temp_parent = left_child;\n    }\n\n    if(right_child < size && auxillaryArray[temp_parent] < auxillaryArray[right_child]){\n        temp_parent = right_child;\n    }\n\n    if(parent != temp_parent){\n        animations.push([temp_parent, parent]);\n        animations.push([temp_parent, parent]);\n        animations.push([parent, auxillaryArray[temp_parent]]);\n        animations.push([temp_parent, auxillaryArray[parent]]);\n        swap(auxillaryArray, parent, temp_parent);\n        HeapSort(auxillaryArray, temp_parent, size);\n    }\n    /*else {\n        animations.push([-1, -1]);\n        animations.push([-1, -1]);\n    }*/\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\n"]},"metadata":{},"sourceType":"module"}