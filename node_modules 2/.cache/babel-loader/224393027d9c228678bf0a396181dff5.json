{"ast":null,"code":"export function getHeapSortAnimations(array) {\n  let animations = [];\n  let auxillaryArray = array.slice();\n  let len = array.length;\n  HeapSortHelper(auxillaryArray, animations, len);\n  array = auxillaryArray;\n  console.log(animations);\n  return [animations, array];\n}\n\nfunction HeapSortHelper(auxillaryArray, animations, len) {\n  for (let i = 0; i <= len / 2 - 1; i++) {\n    HeapSort(auxillaryArray, animations, i, len);\n  }\n\n  for (let i = len - 1; i > 0; --i) {\n    swap(auxillaryArray, 0, i);\n    HeapSort(auxillaryArray, animations, 0, i);\n  }\n}\n\n_c = HeapSortHelper;\n\nfunction HeapSort(auxillaryArray, animations, parent, size) {\n  var temp_parent = parent;\n  var left_child = parent * 2 + 1;\n  var right_child = parent * 2 + 2;\n  console.log(auxillaryArray);\n\n  if (left_child < size && auxillaryArray[temp_parent] < auxillaryArray[left_child]) {\n    temp_parent = left_child;\n  }\n\n  if (right_child < size && auxillaryArray[temp_parent] < auxillaryArray[right_child]) {\n    temp_parent = right_child;\n  }\n\n  if (parent != temp_parent) {\n    /*animations.push([temp_parent, parent]);\n    animations.push([temp_parent, parent]);\n    animations.push([parent, auxillaryArray[temp_parent]]);\n    animations.push([temp_parent, auxillaryArray[parent]]);*/\n    swap(auxillaryArray, parent, temp_parent);\n    console.log(temp_parent);\n    HeapSort(auxillaryArray, animations, temp_parent, size);\n  } else {\n    animations.push([temp_parent, parent]);\n    animations.push([temp_parent, parent]);\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n  }\n}\n\n_c2 = HeapSort;\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n  animations.push([firstIndex, secondIndex]);\n  animations.push([firstIndex, secondIndex]);\n  animations.push([firstIndex, auxillaryArray[secondIndex]]);\n  animations.push([secondIndex, auxillaryArray[firstIndex]]);\n  let temp = auxillaryArray[firstIndex];\n  auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n  auxillaryArray[secondIndex] = temp;\n}\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"HeapSortHelper\");\n$RefreshReg$(_c2, \"HeapSort\");","map":{"version":3,"sources":["/Users/admin/Desktop/algo_term_project 2 2/src/bubblesort/SortingAlgorithms/HeapSort.js"],"names":["getHeapSortAnimations","array","animations","auxillaryArray","slice","len","length","HeapSortHelper","console","log","i","HeapSort","swap","parent","size","temp_parent","left_child","right_child","push","firstIndex","secondIndex","temp"],"mappings":"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","sourcesContent":["export function getHeapSortAnimations(array) {\n    let animations = [];\n    let auxillaryArray = array.slice();\n    let len = array.length;\n    HeapSortHelper(auxillaryArray, animations, len);\n    array = auxillaryArray;\n    console.log(animations);\n    return [animations, array];\n}\n\nfunction HeapSortHelper(auxillaryArray, animations, len)\n{\n    for(let i=0; i <= len/2-1; i++){\n        HeapSort(auxillaryArray, animations, i, len);\n    }\n    for(let i = len-1; i>0; --i){\n        \n        swap(auxillaryArray, 0, i);\n        HeapSort(auxillaryArray, animations, 0, i);\n\n    }\n}\n\nfunction HeapSort(auxillaryArray, animations, parent, size) {\n    var temp_parent = parent;\n    var left_child = parent * 2 + 1;\n    var right_child = parent * 2 + 2;\n\n    console.log(auxillaryArray);\n\n    if(left_child < size && auxillaryArray[temp_parent] < auxillaryArray[left_child]){\n        temp_parent = left_child;\n    }\n\n    if(right_child < size && auxillaryArray[temp_parent] < auxillaryArray[right_child]){\n        temp_parent = right_child;\n    }\n\n    if(parent != temp_parent){\n        /*animations.push([temp_parent, parent]);\n        animations.push([temp_parent, parent]);\n        animations.push([parent, auxillaryArray[temp_parent]]);\n        animations.push([temp_parent, auxillaryArray[parent]]);*/\n        swap(auxillaryArray, parent, temp_parent);\n        console.log(temp_parent);\n        HeapSort(auxillaryArray, animations, temp_parent, size);\n    }\n    else {\n        animations.push([temp_parent, parent]);\n        animations.push([temp_parent, parent]);\n        animations.push([-1, -1]);\n        animations.push([-1, -1]);\n    }\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    animations.push([firstIndex, secondIndex]);\n    animations.push([firstIndex, secondIndex]);\n    animations.push([firstIndex, auxillaryArray[secondIndex]]);\n    animations.push([secondIndex, auxillaryArray[firstIndex]]);\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\n"]},"metadata":{},"sourceType":"module"}