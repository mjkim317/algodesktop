{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/algo_term_project 2 2/src/pages/RandomPage.js\";\nimport React from 'react';\nimport Header from '../bubblesort/SortingVisualizer/Header';\nimport '../bubblesort/SortingVisualizer/SortingViz.css';\nimport { getBubbleSortAnimations } from '../bubblesort/SortingAlgorithms/BubbleSort.js';\nimport { getSelectionSortAnimations } from '../bubblesort/SortingAlgorithms/SelectionSort.js';\nimport { getInsertionSortAnimations } from '../bubblesort/SortingAlgorithms/InsertionSort.js';\nimport { getMergeSort } from '../bubblesort/SortingAlgorithms/MergeSort.js';\nimport { getQuickSortAnimations } from '../bubblesort/SortingAlgorithms/QuickSort.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ANIMATION_SPEED_MS = 1; // This is the main color of the array bars.\n\nconst PRIMARY_COLOR = 'turquoise'; // This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = 'red';\nexport default class SortingViz extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onElemTypeChange = e => {\n      this.setState.handleElemType({\n        type: e.target.value\n      });\n    };\n\n    this.afterFunc = e => {\n      console.log(e);\n      this.setState({\n        array: e\n      }); //console.log(this.state.array);\n\n      if (this.state.type === \"BubbleSort\") this.bubbleSort();\n      if (this.state.type === \"MergeSort\") this.MergeSort();\n    };\n\n    this.state = {\n      array: [],\n      type: 0\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 1; i <= 100; i++) {\n      array.push(i * 5);\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  bubbleSort() {\n    const [animations, sortArray] = getBubbleSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = i % 4 === 0 || i % 4 === 1;\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      if (isColorChange === true) {\n        const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        const [barOneIndex, barTwoIndex] = animations[i];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const [barIndex, newHeight] = animations[i];\n\n        if (barIndex === -1) {\n          continue;\n        }\n\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  selectionSort() {\n    const [animations, sortArray] = getSelectionSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = animations[i][0] === \"comparision1\" || animations[i][0] === \"comparision2\";\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      if (isColorChange === true) {\n        const color = animations[i][0] === \"comparision1\" ? SECONDARY_COLOR : PRIMARY_COLOR;\n        const [temp, barOneIndex, barTwoIndex] = animations[i];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const [temp, barIndex, newHeight] = animations[i];\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    } // this.setState({array: sortArray})\n\n\n    const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\n  }\n\n  insertionSort() {\n    const [animations, sortArray] = getInsertionSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = animations[i][0] === \"comparision1\" || animations[i][0] === \"comparision2\";\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      if (isColorChange === true) {\n        const color = animations[i][0] === \"comparision1\" ? SECONDARY_COLOR : PRIMARY_COLOR;\n        const [temp, barOneIndex, barTwoIndex] = animations[i];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const [temp, barIndex, newHeight] = animations[i];\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    } // this.setState({array: sortArray})\n\n\n    const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\n  }\n\n  quickSort() {\n    const [animations, sortArray] = getQuickSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length - 1; i++) {\n      const isColorChange = i % 6 === 0 || i % 6 === 1;\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      if (isColorChange === true) {\n        const color = i % 6 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        const [barOneIndex, barTwoIndex] = animations[i];\n\n        if (barOneIndex === -1) {\n          continue;\n        }\n\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const [barIndex, newHeight] = animations[i];\n\n        if (barIndex === -1) {\n          continue;\n        }\n\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    } // this.setState({array: sortArray})\n\n\n    const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS * animations.length / 2 + 3000);\n  }\n\n  mergeSort() {\n    const animations = getMergeSort(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  handleChange(e) {\n    let file = e.target.files[0];\n    let fileReader = new FileReader();\n    let list;\n\n    fileReader.onload = () => {\n      //console.log(fileReader.result);\n      var text = fileReader.result;\n      var array = text.split(\" \");\n      console.log(array);\n\n      for (var i = 0; i < array.length; i++) {\n        array[i] = 5 * Number(array[i]);\n      } //console.log(array);\n\n\n      list = array;\n      this.afterFunc(list);\n    };\n\n    fileReader.readAsText(file);\n  }\n  /*afterFunc1 = (e) => {\n      console.log(e);\n      this.setState( {array: e});\n      //console.log(this.state.array);\n      this.selectionSort();\n  }\n   handleChange1(e){\n      let file = e.target.files[0];\n      let fileReader = new FileReader();\n      let list;\n      fileReader.onload = () => {\n          //console.log(fileReader.result);\n          var text = fileReader.result\n          var array = text.split(\" \");\n          console.log(array);\n          for(var i=0; i<array.length; i++) {\n              array[i] = 5 * Number(array[i]);\n          }\n          //console.log(array);\n          list = array;\n          this.afterFunc1(list);\n      };\n      fileReader.readAsText(file);\n  }\n   afterFunc2 = (e) => {\n      console.log(e);\n      this.setState( {array: e});\n      //console.log(this.state.array);\n      this.insertionSort();\n  }\n   handleChange2(e){\n      let file = e.target.files[0];\n      let fileReader = new FileReader();\n      let list;\n      fileReader.onload = () => {\n          //console.log(fileReader.result);\n          var text = fileReader.result\n          var array = text.split(\" \");\n          console.log(array);\n          for(var i=0; i<array.length; i++) {\n              array[i] = 5 * Number(array[i]);\n          }\n          //console.log(array);\n          list = array;\n          this.afterFunc2(list);\n      };\n      fileReader.readAsText(file);\n  }\n   afterFunc3 = (e) => {\n      console.log(e);\n      this.setState( {array: e});\n      //console.log(this.state.array);\n      this.quickSort();\n  }\n   handleChange3(e){\n      let file = e.target.files[0];\n      let fileReader = new FileReader();\n      let list;\n      fileReader.onload = () => {\n          //console.log(fileReader.result);\n          var text = fileReader.result\n          var array = text.split(\" \");\n          console.log(array);\n          for(var i=0; i<array.length; i++) {\n              array[i] = 5 * Number(array[i]);\n          }\n          //console.log(array);\n          list = array;\n          this.afterFunc3(list);\n      };\n      fileReader.readAsText(file);\n  }\n   afterFunc4 = (e) => {\n      console.log(e);\n      this.setState( {array: e});\n      //console.log(this.state.array);\n      this.mergeSort();\n  }\n   handleChange4(e){\n      let file = e.target.files[0];\n      let fileReader = new FileReader();\n      let list;\n      fileReader.onload = () => {\n          //console.log(fileReader.result);\n          var text = fileReader.result\n          var array = text.split(\" \");\n          console.log(array);\n          for(var i=0; i<array.length; i++) {\n              array[i] = 5 * Number(array[i]);\n          }\n          //console.log(array);\n          list = array;\n          this.afterFunc4(list);\n      };\n      fileReader.readAsText(file);\n  }*/\n\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"randompage\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"input-file-button\",\n        for: \"input-file\",\n        children: \"Bubble Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"input-file\",\n        style: {\n          display: \"none\"\n        },\n        accept: \".txt\",\n        onChange: this.handleChange.bind(this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"input-file-button1\",\n        for: \"input-file\",\n        children: \"Selection Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"input-file\",\n        style: {\n          display: \"none\"\n        },\n        accept: \".txt\",\n        onChange: this.handleChange1.bind(this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"input-file-button2\",\n        for: \"input-file\",\n        children: \"Insertion Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"input-file\",\n        style: {\n          display: \"none\"\n        },\n        accept: \".txt\",\n        onChange: this.handleChange2.bind(this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"input-file-button3\",\n        for: \"input-file\",\n        children: \"Quick Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"input-file\",\n        style: {\n          display: \"none\"\n        },\n        accept: \".txt\",\n        onChange: this.handleChange3.bind(this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"input-file-button4\",\n        for: \"input-file\",\n        children: \"Merge Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"input-file\",\n        style: {\n          display: \"none\"\n        },\n        accept: \".txt\",\n        onChange: this.handleChange4.bind(this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"input-file-button5\",\n        for: \"input-file\",\n        children: \"Heap Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"input-file\",\n        style: {\n          display: \"none\"\n        },\n        accept: \".txt\",\n        onChange: this.handleChange.bind(this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"array-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"elemtype\",\n          children: \"Elem Type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          name: \"elemtype\",\n          onChange: this.onElemTypeChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"BubbleSort\",\n            children: \"BubbleSort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"SelectionSort\",\n            children: \"SelectionSort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"InsertionSort\",\n            children: \"InsertionSort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"QuickSort\",\n            children: \"QuickSort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"MergeSort\",\n            children: \"MergeSort\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 17\n        }, this), array.map((value, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"array-bar\",\n          style: {\n            height: `${value}px`\n          },\n          wid: {\n            width: `$10px`\n          }\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 17\n        }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nfunction arrayAreEqual(arrayOne, ArrayTwo) {\n  if (arrayOne.length !== ArrayTwo.length) return false;\n\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== ArrayTwo[i]) return false;\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/Users/admin/Desktop/algo_term_project 2 2/src/pages/RandomPage.js"],"names":["React","Header","getBubbleSortAnimations","getSelectionSortAnimations","getInsertionSortAnimations","getMergeSort","getQuickSortAnimations","ANIMATION_SPEED_MS","PRIMARY_COLOR","SECONDARY_COLOR","SortingViz","Component","constructor","props","onElemTypeChange","e","setState","handleElemType","type","target","value","afterFunc","console","log","array","state","bubbleSort","MergeSort","componentDidMount","resetArray","i","push","animations","sortArray","length","isColorChange","arrayBars","document","getElementsByClassName","color","barOneIndex","barTwoIndex","barOneStyle","style","barTwoStyle","setTimeout","backgroundColor","barIndex","newHeight","barStyle","height","selectionSort","temp","RESTORE_TIME","parseInt","insertionSort","quickSort","mergeSort","barOneIdx","barTwoIdx","handleChange","file","files","fileReader","FileReader","list","onload","text","result","split","Number","readAsText","render","display","bind","handleChange1","handleChange2","handleChange3","handleChange4","map","idx","width","arrayAreEqual","arrayOne","ArrayTwo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Header from '../bubblesort/SortingVisualizer/Header';\nimport '../bubblesort/SortingVisualizer/SortingViz.css';\nimport {getBubbleSortAnimations} from '../bubblesort/SortingAlgorithms/BubbleSort.js'\nimport {getSelectionSortAnimations} from '../bubblesort/SortingAlgorithms/SelectionSort.js'\nimport {getInsertionSortAnimations} from '../bubblesort/SortingAlgorithms/InsertionSort.js'\nimport {getMergeSort} from '../bubblesort/SortingAlgorithms/MergeSort.js'\nimport {getQuickSortAnimations} from '../bubblesort/SortingAlgorithms/QuickSort.js'\nconst ANIMATION_SPEED_MS = 1;\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\nexport default class SortingViz extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            array: [],\n            type: 0\n        }\n    }\n\n    componentDidMount(){\n        this.resetArray();\n    }\n\n    resetArray(){\n        const array = [];\n        for(let i=1;i<=100;i++){\n            array.push(i*5)\n        }\n        this.setState({array})\n    }\n\n    onElemTypeChange = (e) => {\n        this.setState.handleElemType({type: e.target.value});\n    }\n\n\n    bubbleSort(){\n        const [animations,sortArray] = getBubbleSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (i % 4 === 0) || (i % 4 === 1);\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (i % 4 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);\n            }\n        }\n    }\n\n    selectionSort(){\n        const [animations,sortArray] = getSelectionSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [temp, barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);\n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n\n    }\n\n    insertionSort(){\n        const [animations,sortArray] = getInsertionSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [temp, barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);\n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n\n    }\n\n    quickSort(){\n        const [animations,sortArray] = getQuickSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length - 1; i++) {\n            const isColorChange = (i % 6 === 0) || (i % 6 === 1);\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if(isColorChange === true) {\n                const color = (i % 6 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [barOneIndex, barTwoIndex] = animations[i];\n                if(barOneIndex === -1) {\n                    continue;\n                }\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                },i * ANIMATION_SPEED_MS);\n            }\n        }\n        // this.setState({array: sortArray})\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n\n    }\n\n    mergeSort(){\n        const animations = getMergeSort(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n    }\n\n    afterFunc = (e) => {\n        console.log(e);\n        this.setState( {array: e});\n        //console.log(this.state.array);\n        if(this.state.type === \"BubbleSort\")\n            this.bubbleSort();\n        if(this.state.type === \"MergeSort\")\n            this.MergeSort();\n    }\n\n    handleChange(e){\n        let file = e.target.files[0];\n        let fileReader = new FileReader();\n        let list;\n        fileReader.onload = () => {\n            //console.log(fileReader.result);\n            var text = fileReader.result\n            var array = text.split(\" \");\n            console.log(array);\n            for(var i=0; i<array.length; i++) {\n                array[i] = 5 * Number(array[i]);\n            }\n            //console.log(array);\n            list = array;\n            this.afterFunc(list);\n        };\n        fileReader.readAsText(file);\n    }\n\n    /*afterFunc1 = (e) => {\n        console.log(e);\n        this.setState( {array: e});\n        //console.log(this.state.array);\n        this.selectionSort();\n    }\n\n    handleChange1(e){\n        let file = e.target.files[0];\n        let fileReader = new FileReader();\n        let list;\n        fileReader.onload = () => {\n            //console.log(fileReader.result);\n            var text = fileReader.result\n            var array = text.split(\" \");\n            console.log(array);\n            for(var i=0; i<array.length; i++) {\n                array[i] = 5 * Number(array[i]);\n            }\n            //console.log(array);\n            list = array;\n            this.afterFunc1(list);\n        };\n        fileReader.readAsText(file);\n    }\n\n    afterFunc2 = (e) => {\n        console.log(e);\n        this.setState( {array: e});\n        //console.log(this.state.array);\n        this.insertionSort();\n    }\n\n    handleChange2(e){\n        let file = e.target.files[0];\n        let fileReader = new FileReader();\n        let list;\n        fileReader.onload = () => {\n            //console.log(fileReader.result);\n            var text = fileReader.result\n            var array = text.split(\" \");\n            console.log(array);\n            for(var i=0; i<array.length; i++) {\n                array[i] = 5 * Number(array[i]);\n            }\n            //console.log(array);\n            list = array;\n            this.afterFunc2(list);\n        };\n        fileReader.readAsText(file);\n    }\n\n    afterFunc3 = (e) => {\n        console.log(e);\n        this.setState( {array: e});\n        //console.log(this.state.array);\n        this.quickSort();\n    }\n\n    handleChange3(e){\n        let file = e.target.files[0];\n        let fileReader = new FileReader();\n        let list;\n        fileReader.onload = () => {\n            //console.log(fileReader.result);\n            var text = fileReader.result\n            var array = text.split(\" \");\n            console.log(array);\n            for(var i=0; i<array.length; i++) {\n                array[i] = 5 * Number(array[i]);\n            }\n            //console.log(array);\n            list = array;\n            this.afterFunc3(list);\n        };\n        fileReader.readAsText(file);\n    }\n\n    afterFunc4 = (e) => {\n        console.log(e);\n        this.setState( {array: e});\n        //console.log(this.state.array);\n        this.mergeSort();\n    }\n\n    handleChange4(e){\n        let file = e.target.files[0];\n        let fileReader = new FileReader();\n        let list;\n        fileReader.onload = () => {\n            //console.log(fileReader.result);\n            var text = fileReader.result\n            var array = text.split(\" \");\n            console.log(array);\n            for(var i=0; i<array.length; i++) {\n                array[i] = 5 * Number(array[i]);\n            }\n            //console.log(array);\n            list = array;\n            this.afterFunc4(list);\n        };\n        fileReader.readAsText(file);\n    }*/\n\n    render(){\n        const {array} = this.state;\n        return(\n            <div className=\"randompage\">\n            <Header/>\n            \n                    <label className=\"input-file-button\" for=\"input-file\">Bubble Sort</label>\n                    <input type=\"file\" id=\"input-file\"  style={{display:\"none\"}} accept='.txt' onChange={this.handleChange.bind(this)}/> \n                    <label className=\"input-file-button1\" for=\"input-file\">Selection Sort</label>\n                    <input type=\"file\" id=\"input-file\"  style={{display:\"none\"}} accept='.txt' onChange={this.handleChange1.bind(this)}/> \n                    <label className=\"input-file-button2\" for=\"input-file\">Insertion Sort</label>\n                    <input type=\"file\" id=\"input-file\"  style={{display:\"none\"}} accept='.txt' onChange={this.handleChange2.bind(this)}/> \n                    <label className=\"input-file-button3\" for=\"input-file\">Quick Sort</label>\n                    <input type=\"file\" id=\"input-file\"  style={{display:\"none\"}} accept='.txt' onChange={this.handleChange3.bind(this)}/> \n                    <label className=\"input-file-button4\" for=\"input-file\">Merge Sort</label>\n                    <input type=\"file\" id=\"input-file\"  style={{display:\"none\"}} accept='.txt' onChange={this.handleChange4.bind(this)}/> \n                    <label className=\"input-file-button5\" for=\"input-file\">Heap Sort</label>\n                    <input type=\"file\" id=\"input-file\"  style={{display:\"none\"}} accept='.txt' onChange={this.handleChange.bind(this)}/> \n            \n\n            <div className=\"array-container\">\n\n            <label htmlFor=\"elemtype\">Elem Type</label>\n                <br/>\n                <select name=\"elemtype\" onChange={this.onElemTypeChange}>\n                        <option value=\"BubbleSort\">BubbleSort</option>\n                        <option value=\"SelectionSort\">SelectionSort</option>\n                        <option value=\"InsertionSort\">InsertionSort</option>\n                        <option value=\"QuickSort\">QuickSort</option>\n                        <option value=\"MergeSort\">MergeSort</option>\n                </select>\n\n\n            {array.map((value,idx) => (\n                <div\n                className=\"array-bar\"\n                 key={idx}\n                 style={{height: `${value}px`}}\n                 wid = {{width: `$10px`}}\n                 ></div>\n            ))}\n            <br></br>\n            </div>\n            </div>\n        )\n    }\n}\n\nfunction arrayAreEqual(arrayOne,ArrayTwo){\n    if(arrayOne.length !== ArrayTwo.length) return false;\n    for(let i=0;i<arrayOne.length;i++){\n        if(arrayOne[i] !== ArrayTwo[i]) return false;\n    }\n    return true;\n}"]},"metadata":{},"sourceType":"module"}